    CREATE TABLE IF NOT EXISTS BOOK (
        BOOK_ID             SERIAL PRIMARY KEY,
        BOOK_NAME           VARCHAR(100),
        RELEASE_YEAR        SMALLINT,
        BOOK_EXPLANATION    VARCHAR(1000)
    );

    CREATE TABLE IF NOT EXISTS CATEGORY (
        CATEGORY_ID         SERIAL PRIMARY KEY,
        CATEGORY_NAME       VARCHAR(50) UNIQUE
    );

    CREATE TABLE IF NOT EXISTS BOOK_CATEGORY (
        BOOK_ID             INTEGER REFERENCES BOOK (BOOK_ID),
        CATEGORY_ID         INTEGER REFERENCES CATEGORY (CATEGORY_ID),
        PRIMARY KEY         (BOOK_ID, CATEGORY_ID)
    );



    CREATE TABLE IF NOT EXISTS PERSON (
        PERSON_ID           SERIAL PRIMARY KEY,
        PERSON_NAME         VARCHAR(50) NOT NULL,
        SURNAME             VARCHAR(50) NOT NULL,
        GENDER              GENDER_TYPE,
        DATE_OF_BIRTH       DATE,
        NATIONALITY         VARCHAR(50)
    );

    CREATE TABLE IF NOT EXISTS CUSTOMER (
        CUSTOMER_ID         SERIAL PRIMARY KEY,
        PERSON_ID           INTEGER REFERENCES PERSON (PERSON_ID) UNIQUE,
        USERNAME            VARCHAR(20) UNIQUE NOT NULL,
        EMAIL               VARCHAR(50) UNIQUE NOT NULL,
        PASS_HASH           CHAR(87) NOT NULL,
        PHONE               CHAR(10) UNIQUE NOT NULL,
        IS_ACTIVE           BOOLEAN DEFAULT TRUE
    );

    CREATE TABLE IF NOT EXISTS ADDRESS (
        ADDRESS_ID          SERIAL PRIMARY KEY,
        ADDRESS_NAME        VARCHAR(30),
        COUNTRY             VARCHAR(30) NOT NULL,
        CITY                VARCHAR(30) NOT NULL,
        DISTRICT            VARCHAR(30),
        NEIGHBORHOOD        VARCHAR(30),
        AVENUE              VARCHAR(30),
        STREET              VARCHAR(30),
        ADDR_NUMBER         VARCHAR(10),
        ZIPCODE             CHAR(5),
        EXPLANATION         VARCHAR(500)
    );

    CREATE TABLE IF NOT EXISTS AUTHOR (
        AUTHOR_ID           SERIAL PRIMARY KEY,
        PERSON_ID           INTEGER REFERENCES PERSON (PERSON_ID),
        BIOGRAPHY           VARCHAR(1000)
    );

    CREATE TABLE IF NOT EXISTS BOOK_AUTHOR (
        BOOK_ID             INTEGER REFERENCES BOOK (BOOK_ID),
        AUTHOR_ID           INTEGER REFERENCES AUTHOR (AUTHOR_ID),
        PRIMARY KEY         (BOOK_ID, AUTHOR_ID)
    );

    CREATE TABLE IF NOT EXISTS COMMENT (
        COMMENT_ID          SERIAL PRIMARY KEY,
        CUSTOMER_ID         INTEGER REFERENCES CUSTOMER (CUSTOMER_ID),
        BOOK_ID             INTEGER REFERENCES BOOK (BOOK_ID),
        COMMENT_TITLE       VARCHAR(50) NOT NULL,
        COMMENT_STATEMENT   VARCHAR(500) NOT NULL,
        ADDED_TIME          TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        UPDATED_TIME        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        RATING              RATE_TYPE
    );

    CREATE TABLE IF NOT EXISTS CUSTOMER_ADDRESS (
        CUSTOMER_ID         INTEGER REFERENCES CUSTOMER (CUSTOMER_ID),
        ADDRESS_ID          INTEGER REFERENCES ADDRESS (ADDRESS_ID),
        PRIMARY KEY         (CUSTOMER_ID, ADDRESS_ID)
    );

    CREATE TABLE IF NOT EXISTS BOOK_EDITION (
        BOOK_ID             INTEGER REFERENCES BOOK (BOOK_ID),
        EDITION_NUMBER      SMALLINT,
        ISBN                VARCHAR(20),
        PUBLISHER           VARCHAR(100),
        PUBLISH_YEAR        SMALLINT,
        NUMBER_OF_PAGES     SMALLINT,
        LANGUAGE            VARCHAR(50),
        PRIMARY KEY         (BOOK_ID, EDITION_NUMBER)
    );

    CREATE TABLE IF NOT EXISTS TRANSACTION (
        TRANSACTION_ID      SERIAL PRIMARY KEY,
        CUSTOMER_ID         INTEGER REFERENCES CUSTOMER (CUSTOMER_ID),
        ADDRESS_ID          INTEGER REFERENCES ADDRESS (ADDRESS_ID) DEFAULT NULL,
        TRANSACTION_TIME    TIMESTAMP DEFAULT NULL,
        PAYMENT_TYPE        VARCHAR(30) DEFAULT NULL,
        TRANSACTION_EXPLANATION  VARCHAR(200) DEFAULT NULL,
        IS_COMPLETED        BOOLEAN DEFAULT FALSE
    );

    CREATE TABLE IF NOT EXISTS PRODUCT (
        BOOK_ID             INTEGER,
        EDITION_NUMBER      SMALLINT,
        REMAINING           SMALLINT NOT NULL DEFAULT 0,
        ACTUAL_PRICE        FLOAT,
        NUMBER_OF_SELLS     SMALLINT DEFAULT 0,
        PRODUCT_DATE_ADDED  DATE NOT NULL DEFAULT CURRENT_DATE,
        PRODUCT_EXPLANATION VARCHAR(500),
        IS_ACTIVE           BOOLEAN DEFAULT TRUE,
        FOREIGN KEY         (BOOK_ID, EDITION_NUMBER) REFERENCES BOOK_EDITION (BOOK_ID, EDITION_NUMBER),
        PRIMARY KEY         (BOOK_ID, EDITION_NUMBER)
    );

    CREATE TABLE IF NOT EXISTS TRANSACTION_PRODUCT (
        TRANSACTION_ID      INTEGER REFERENCES TRANSACTION (TRANSACTION_ID),
        BOOK_ID             INTEGER,
        EDITION_NUMBER      SMALLINT,
        PIECE               SMALLINT DEFAULT 1,
        UNIT_PRICE          FLOAT,
        FOREIGN KEY         (BOOK_ID, EDITION_NUMBER) REFERENCES PRODUCT (BOOK_ID, EDITION_NUMBER),
        PRIMARY KEY         (TRANSACTION_ID, BOOK_ID, EDITION_NUMBER)
    );

    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'rate_type') THEN
            CREATE DOMAIN RATE_TYPE AS SMALLINT
            CHECK (
                (VALUE > 0) AND (VALUE <= 5)
            );
        END IF;
    END$$;


    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'gender_type') THEN
            CREATE DOMAIN GENDER_TYPE AS CHAR(1)
            CHECK (
                (VALUE = 'F') OR (VALUE = 'M') OR (VALUE = 'O')
            );
        END IF;
    END$$;
